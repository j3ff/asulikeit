packageDecl : PACKAGE ( identifier )? packageBlock ;

packageBlock : LCURLY ( packageBlockEntry )* RCURLY ;

packageBlockEntry : ( importDefinition | annos= annotations mods= modifiers ( classDefinition[$annos.tree,$mods.tree] | interfaceDefinition[$annos.tree,$mods.tree] | variableDefinition[$annos.tree,$mods.tree] | methodDefinition[$annos.tree,$mods.tree] | namespaceDefinition[$annos.tree,$mods.tree] | useNamespaceDirective ) | SEMI ) ;
endOfFile : EOF ;

importDefinition : IMPORT identifierStar semi ;
semi : SEMI ;

identifierStar : ident ( options {greedy=true; } : DOT ident )* ( DOT STAR )? -> ^( IDENTIFIER_STAR ( ident )+ ( STAR )? ) ;

classDefinition[LinkedListTree annos, LinkedListTree mods] : CLASS ident classExtendsClause implementsClause typeBlock -> ^( CLASS_DEF ident classExtendsClause implementsClause typeBlock ) ;
as2ClassDefinition[LinkedListTree annos, LinkedListTree mods] : CLASS identifier classExtendsClause implementsClause typeBlock -> ^( CLASS_DEF identifier classExtendsClause implementsClause typeBlock ) ;
interfaceDefinition[LinkedListTree annos, Tree mods] : INTERFACE ident interfaceExtendsClause typeBlock -> ^( INTERFACE_DEF ident interfaceExtendsClause typeBlock ) ;
as2InterfaceDefinition[LinkedListTree annos, Tree mods] : INTERFACE identifier interfaceExtendsClause typeBlock -> ^( INTERFACE_DEF identifier interfaceExtendsClause typeBlock ) ;
classExtendsClause : ( EXTENDS identifier )? ;
interfaceExtendsClause : ( EXTENDS identifier ( COMMA identifier )* )? ;
implementsClause : ( IMPLEMENTS identifier ( COMMA identifier )* )? ;
typeBlock : LCURLY ( typeBlockEntry )* RCURLY -> ^( TYPE_BLOCK ( typeBlockEntry )* ) ;
typeBlockEntry : (a= annotations m= modifiers ( variableDefinition[$a.tree,$m.tree] | methodDefinition[$a.tree,$m.tree] ) | importDefinition | as2IncludeDirective );
as2IncludeDirective : INCLUDE_DIRECTIVE STRING_LITERAL ;
includeDirective : 'include' STRING_LITERAL semi ;
methodDefinition[LinkedListTree annos, Tree mods] : FUNCTION r= optionalAccessorRole ident parameterDeclarationList ( typeExpression )? ( block | semi ) -> ^( METHOD_DEF optionalAccessorRole ident parameterDeclarationList ( typeExpression )? ( block )? ) ;
optionalAccessorRole : ( accessorRole )? -> ^( ACCESSOR_ROLE ( accessorRole )? ) ;
accessorRole : ( GET | SET );
namespaceDefinition[LinkedListTree annos, Tree mods] : NAMESPACE ident -> ^( NAMESPACE_DEF NAMESPACE ident ) ;
useNamespaceDirective : USE NAMESPACE ident semi ;
variableDefinition[LinkedListTree annos, Tree mods] : decl= varOrConst variableDeclarator ( COMMA variableDeclarator )* semi -> ^( VAR_DEF $decl ( variableDeclarator )+ ) ;
varOrConst : ( VAR | CONST );
variableDeclarator : ident ( typeExpression )? ( variableInitializer )? ;
declaration : varOrConst variableDeclarator declarationTail ;
declarationTail : ( COMMA variableDeclarator )* ;
variableInitializer : ASSIGN assignmentExpression ;
parameterDeclarationList : LPAREN ( parameterDeclaration ( COMMA parameterDeclaration )* )? RPAREN -> ^( PARAMS ( parameterDeclaration )* ) ;
parameterDeclaration : ( basicParameterDeclaration | parameterRestDeclaration );
basicParameterDeclaration : ( CONST )? ident ( typeExpression )? ( parameterDefault )? -> ^( PARAM ( CONST )? ident ( typeExpression )? ( parameterDefault )? ) ;
parameterDefault : ASSIGN assignmentExpression ;
parameterRestDeclaration : REST ( ident )? -> ^( PARAM REST ( ident )? ) ;
block : LCURLY ( blockEntry )* RCURLY -> ^( BLOCK ( blockEntry )* ) ;
blockEntry : statement ;
condition : LPAREN expression RPAREN -> ^( CONDITION expression ) ;
statement : ( superStatement | ( LCURLY )=> block | declarationStatement | expressionStatement | ifStatement | forEachStatement | forStatement | whileStatement | doWhileStatement | withStatement | switchStatement | breakStatement | continueStatement | returnStatement | throwStatement | tryStatement | defaultXMLNamespaceStatement | SEMI );
superStatement : SUPER arguments semi ;
declarationStatement : declaration semi ;
expressionStatement : expressionList semi -> ^( EXPR_STMNT expressionList ) ;
ifStatement : IF condition statement ( ( ELSE )=> elseClause )? ;
elseClause : ELSE statement ;
throwStatement : THROW expression semi ;
tryStatement : TRY block ( finallyBlock | ( catchBlock )+ ( finallyBlock )? ) -> ^( TRY block ( catchBlock )* ( finallyBlock )? ) ;
catchBlock : CATCH LPAREN ident ( typeExpression )? RPAREN block -> ^( CATCH ident ( typeExpression )? block ) ;
finallyBlock : FINALLY block ;
returnStatement : RETURN ( expression )? semi ;
continueStatement : CONTINUE semi ;
breakStatement : BREAK semi ;
switchStatement : SWITCH condition switchBlock ;
switchBlock : LCURLY ( caseStatement )* ( defaultStatement )? RCURLY -> ^( BLOCK ( caseStatement )* ( defaultStatement )? ) ;
caseStatement : CASE expression COLON l= switchStatementList ;
defaultStatement : DEFAULT COLON l= switchStatementList ;
switchStatementList : ( statement )* -> ^( SWITCH_STATEMENT_LIST ( statement )* ) ;
forEachStatement : f= FOR EACH LPAREN forInClause RPAREN statement -> ^( FOR_EACH[$f] forInClause statement ) ;
forStatement : f= FOR LPAREN ( ( forInClauseDecl IN )=> forInClause RPAREN statement -> ^( FOR_IN[$f] forInClause statement ) | traditionalForClause RPAREN statement -> ^( $f traditionalForClause statement ) ) ;
traditionalForClause : a= forInit SEMI b= forCond SEMI c= forIter ;
forInClause : forInClauseDecl IN forInClauseTail ;
forInClauseDecl : ( declaration | ident );
forInClauseTail : expressionList ;
forInit : ( declaration | expressionList )? -> ^( FOR_INIT ( declaration )? ( expressionList )? ) ;
forCond : ( expressionList )? -> ^( FOR_CONDITION ( expressionList )? ) ;
forIter : ( expressionList )? -> ^( FOR_ITERATOR ( expressionList )? ) ;
whileStatement : WHILE condition statement ;
doWhileStatement : DO statement WHILE condition semi ;
withStatement : WITH condition statement ;
defaultXMLNamespaceStatement : DEFAULT XML NAMESPACE ASSIGN expression semi -> ^( DEFAULT_XML_NAMESPACE expression ) ;
typeExpression : c= COLON ( identifier | VOID | STAR ) -> ^( TYPE_SPEC[$c] ( identifier )? ( VOID )? ( STAR )? ) ;
identifier : ( qualifiedIdent -> qualifiedIdent ) ( options {greedy=true; } : poi= propOrIdent[root_0, retval.start] -> $poi)* -> ^( IDENTIFIER $identifier) ;
propertyIdentifier : ( STAR | ident );
qualifier : ( propertyIdentifier | reservedNamespace ) ;
simpleQualifiedIdentifier : ( propertyIdentifier | qualifier DBL_COLON ( propertyIdentifier | brackets ) );
expressionQualifiedIdentifier : encapsulatedExpression DBL_COLON ( propertyIdentifier | brackets ) ;
nonAttributeQualifiedIdentifier : ( simpleQualifiedIdentifier | expressionQualifiedIdentifier );
qualifiedIdentifier : ( e4xAttributeIdentifier | nonAttributeQualifiedIdentifier );
qualifiedIdent : ( namespaceName DBL_COLON )? ident ;
namespaceName : ( IDENT | reservedNamespace );
reservedNamespace : ( PUBLIC | PRIVATE | PROTECTED | INTERNAL );
annotations : ( annotation | includeDirective )* -> ^( ANNOTATIONS ( annotation )* ) ;
annotation : LBRACK ident ( annotationParamList )? RBRACK -> ^( ANNOTATION ident ( annotationParamList )? ) ;
annotationParamList : LPAREN ( annotationParam ( COMMA annotationParam )* )? RPAREN -> ^( ANNOTATION_PARAMS ( annotationParam )* ) ;
annotationParam : ( ident ASSIGN constant -> ^( ASSIGN ident constant ) | constant -> constant | ident -> ident );
modifiers : ( modifier )* -> ^( MODIFIERS ( modifier )* ) ;
modifier : ( namespaceName | STATIC | FINAL | 'enumerable' | 'explicit' | OVERRIDE | DYNAMIC | 'intrinsic' );
arguments : ( LPAREN expressionList RPAREN -> ^( ARGUMENTS expressionList ) | LPAREN RPAREN -> ARGUMENTS );
arrayLiteral : LBRACK ( elementList )? RBRACK -> ^( ARRAY_LITERAL ( elementList )? ) ;
elementList : ( COMMA | nonemptyElementList );
nonemptyElementList : assignmentExpression ( COMMA assignmentExpression )* ;
element : assignmentExpression ;
objectLiteral : LCURLY ( fieldList )? RCURLY -> ^( OBJECT_LITERAL ( fieldList )? ) ;
fieldList : literalField ( COMMA ( literalField )? )* ;
literalField : fieldName COLON element -> ^( OBJECT_FIELD fieldName element ) ;
fieldName : ( ident | number );
expression : assignmentExpression ;
expressionList : assignmentExpression ( COMMA assignmentExpression )* -> ( assignmentExpression )+ ;
assignmentExpression : conditionalExpression ( ( assignmentOperator )=>o= assignmentOperator assignmentExpression )* ;
assignmentOperator : ( ASSIGN | STAR_ASSIGN | DIV_ASSIGN | MOD_ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | SL_ASSIGN | SR_ASSIGN | BSR_ASSIGN | BAND_ASSIGN | BXOR_ASSIGN | BOR_ASSIGN | LAND_ASSIGN | LOR_ASSIGN );
conditionalExpression : ( logicalOrExpression -> logicalOrExpression ) ( QUESTION conditionalSubExpression -> ^( QUESTION $conditionalExpression conditionalSubExpression ) )? ;
conditionalSubExpression : assignmentExpression COLON assignmentExpression ;
logicalOrExpression : logicalAndExpression (o= logicalOrOperator logicalAndExpression )* ;
logicalOrOperator : ( LOR | 'or' );
logicalAndExpression : bitwiseOrExpression (o= logicalAndOperator bitwiseOrExpression )* ;
logicalAndOperator : ( LAND | 'and' );
bitwiseOrExpression : bitwiseXorExpression (o= BOR bitwiseXorExpression )* ;
bitwiseXorExpression : bitwiseAndExpression (o= BXOR bitwiseAndExpression )* ;
bitwiseAndExpression : equalityExpression (o= BAND equalityExpression )* ;
equalityExpression : relationalExpression (o= equalityOperator relationalExpression )* ;
equalityOperator : ( STRICT_EQUAL | STRICT_NOT_EQUAL | NOT_EQUAL | EQUAL );
relationalExpression : shiftExpression ( ( relationalOperator )=>o= relationalOperator shiftExpression )* ;
relationalOperator : ({...}? IN | LT | GT | LE | GE | IS | AS | INSTANCEOF );
shiftExpression : additiveExpression (o= shiftOperator additiveExpression )* ;
shiftOperator : ( SL | SR | BSR );
additiveExpression : multiplicativeExpression (o= additiveOperator multiplicativeExpression )* ;
additiveOperator : ( PLUS | MINUS );
multiplicativeExpression : unaryExpression (o= multiplicativeOperator unaryExpression )* ;
multiplicativeOperator : (s= STAR -> MULT[$s] | DIV | MOD );
unaryExpression : (in= INC unaryExpression -> ^( PRE_INC[$in] unaryExpression ) | de= DEC unaryExpression -> ^( PRE_DEC[$de] unaryExpression ) | MINUS unaryExpression -> ^( UNARY_MINUS unaryExpression ) | PLUS unaryExpression -> ^( UNARY_PLUS unaryExpression ) | unaryExpressionNotPlusMinus );
unaryExpressionNotPlusMinus : ( DELETE postfixExpression -> ^( DELETE postfixExpression ) | VOID unaryExpression -> ^( VOID unaryExpression ) | TYPEOF unaryExpression -> ^( TYPEOF unaryExpression ) | LNOT unaryExpression -> ^( LNOT unaryExpression ) | BNOT unaryExpression -> ^( BNOT unaryExpression ) | postfixExpression );
postfixExpression : ( primaryExpression -> primaryExpression ) (poi= propOrIdent[root_0, retval.start] -> $poi | ( LBRACK expression rb= RBRACK -> ^( ARRAY_ACC $postfixExpression expression ) ) | E4X_DESC qualifiedIdentifier -> ^( E4X_DESC $postfixExpression qualifiedIdentifier ) | DOT LPAREN expression RPAREN -> ^( E4X_FILTER $postfixExpression expression ) | d= DOT e4xAttributeIdentifier -> ^( PROPERTY_OR_IDENTIFIER[$d] $postfixExpression e4xAttributeIdentifier ) | d= DOT STAR -> ^( PROPERTY_OR_IDENTIFIER[$d] $postfixExpression STAR ) | ( arguments -> ^( METHOD_CALL $postfixExpression arguments ) ) )* (in= INC -> ^( POST_INC[$in] $postfixExpression) | de= DEC -> ^( POST_DEC[$de] $postfixExpression) )? ;
e4xAttributeIdentifier : E4X_ATTRI ( qualifiedIdent -> ^( E4X_ATTRI_PROPERTY qualifiedIdent ) | STAR -> ^( E4X_ATTRI_STAR ) | LBRACK expression RBRACK -> ^( E4X_ATTRI_EXPR expression ) ) ;
primaryExpression : ( UNDEFINED | constant | arrayLiteral | objectLiteral | functionExpression | newExpression | encapsulatedExpression | e4xAttributeIdentifier | qualifiedIdent );
propOrIdent[LinkedListTree identPrimary, Token startToken] : d= DOT propId= qualifiedIdent -> ^( PROPERTY_OR_IDENTIFIER[$d] $propId) ;
constant : ( xmlLiteral | regexpLiteral | number | STRING_LITERAL | TRUE | FALSE | NULL );
number : ( HEX_LITERAL | DECIMAL_LITERAL | OCTAL_LITERAL | FLOAT_LITERAL );
xmlLiteral : LT -> ^( XML_LITERAL ) ;
regexpLiteral : s= DIV -> ^( REGEXP_LITERAL ) ;
newExpression : NEW fullNewSubexpression ( ( LPAREN )=> arguments )? ;
fullNewSubexpression : ( primaryExpression -> primaryExpression ) ( ( DOT )=>d= DOT qualifiedIdent -> ^( PROPERTY_OR_IDENTIFIER[$d] $fullNewSubexpression qualifiedIdent ) | ( LBRACK )=> brackets -> ^( ARRAY_ACC $fullNewSubexpression brackets ) )* ;
propertyOperator : ( DOT qualifiedIdent | brackets );
brackets : LBRACK expressionList RBRACK ;
superExpression : SUPER ( arguments )? ;
encapsulatedExpression : LPAREN assignmentExpression RPAREN -> ^( ENCPS_EXPR assignmentExpression ) ;
functionSignature : parameterDeclarationList ( typeExpression )? ;
functionCommon : functionSignature block ;
functionExpression : FUNCTION ( IDENT )? functionCommon -> ^( FUNC_DEF ( IDENT )? functionCommon ) ;
ident : ( IDENT | i= USE -> IDENT[$i] | i= XML -> IDENT[$i] | i= DYNAMIC -> IDENT[$i] | i= NAMESPACE -> IDENT[$i] | i= IS -> IDENT[$i] | i= AS -> IDENT[$i] | i= GET -> IDENT[$i] | i= SET -> IDENT[$i] );
synpred1 : LCURLY ;
synpred2 : ELSE ;
synpred3 : forInClauseDecl IN ;
synpred4 : assignmentOperator ;
synpred5 : relationalOperator ;
synpred6 : LPAREN ;
synpred7 : DOT ;
synpred8 : LBRACK ;
